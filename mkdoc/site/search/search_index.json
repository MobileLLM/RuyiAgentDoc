{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RuyiAgent Documentation","text":"<p>Framework for building intelligent, reliable and efficient mobile agents.</p> <p>\u6784\u5efa\u548c\u652f\u6491\u66f4\u667a\u80fd\u3001\u66f4\u53ef\u9760\u3001\u66f4\u9ad8\u6548\u7684\u79fb\u52a8\u7aef\u667a\u80fd\u4f53\u6846\u67b6\u3002</p> <p>Welcome to Every Participant! </p> <p>We welcome everyone to participate in the development and use of RuyiAgent, whether as a developer, user, contributor, or any other role.</p> <p>Join Us! </p> <p>RuyiAgent is still under development, and we welcome all users, suggesters, and contributors to participate. Feel free to connect with us through the Github Repo. Likewise, this documentation is also under development, so please check back regularly for updates.</p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>For all readers, we recommend starting with:</p> <ul> <li> RuyiAgent Overview to learn about the basic concepts and features of RuyiAgent.</li> </ul> <p>This documentation is intended for four main audiences:</p> <ul> <li>RuyiAgent Users: Users who want to use RuyiAgent or integrate it into existing systems. Not yet completed, stay tuned.</li> <li>Agent Developers: Developers who wish to understand the internal workings of RuyiAgent and build their own agents. Not yet completed, stay tuned.</li> <li>RuyiAgent System Contributors: System developers who want to contribute to the development of RuyiAgent. Please refer to the  System Contributor Guide</li> <li>Scholars: Scholars aiming to replicate paper results or use the RuyiAgent framework for research. Not yet completed, stay tuned.</li> </ul>"},{"location":"#update-log","title":"Update Log","text":"<ul> <li>2024.10: The RuyiAgent project officially launched.</li> </ul>"},{"location":"#copyright-notice","title":"Copyright Notice","text":"<ul> <li>This work is launched by the RuyiAgent project team of the AIoT team at the Institute for AI Industry Research, Tsinghua University.</li> <li>More detailed citation formats will be released in the future.</li> </ul>"},{"location":"overview/whats_ruyiagent/","title":"RuyiAgent","text":"<p>RuyiAgent aims to build and support a more intelligent, reliable, and efficient framework for mobile agents.</p> <p>Key components include:</p> <ol> <li>A Mobile Agent programming framework with features such as API design that is friendly to agent developers, natural language-driven programming, a proprietary interpreter, efficient and reliable intelligent UI interaction, data storage, and a more comprehensive security system.</li> <li>A collection of more powerful Mobile Agent applications.</li> <li>Research and open-source implementations of a series of key technologies.</li> </ol>"},{"location":"system_developer/api_document/","title":"\u4e3b\u8981API","text":"<p>\u6b64\u5904\u7b80\u5355\u4ecb\u7ecd\u521d\u7248\u6846\u67b6\u7684\u4e3b\u8981API\uff1a</p> <pre><code># 0. agent\n# \u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u4e00\u4e2aagent\u5b9e\u4f8b\uff0c\u4f9d\u9760\u6d88\u606f\u961f\u5217\u5355\u7ebf\u7a0b\u5de5\u4f5c\uff0c\u6210\u5458\u53d8\u91cf\u4e2d\u7ef4\u62a4\u6240\u6709 API \u7684\u7c7b\u5b9e\u4f8b\nRuyiAgent.__init__(AgentConfig) # \u6839\u636e config \u5b9e\u4f8b\u5316 Agent \u53ca\u5176\u6240\u6709\u6210\u5458\u53d8\u91cf\u5e76\u542f\u52a8\nRuyiAgent.serve()  # \u542f\u52a8\u6d88\u606f\u961f\u5217\u8f6e\u8be2\nRuyiAgent.stop()  # \u505c\u6b62\u6d88\u606f\u961f\u5217\u8f6e\u8be2\u5e76\u505c\u6b62\u6240\u6709\u6210\u5458\u53d8\u91cf\u7684 API \u5b9e\u4f8b\nRuyiAgent.log(message, tag=\"INFO\", reply_msg=None)  # \u65e5\u5fd7\u8bb0\u5f55\n\n# 1. task\nRuyiTask\n\n# 2. device\nRuyiDevice.take_picture()  # \u62cd\u7167\nRuyiDevice.sms(phone_num, msg)  # \u53d1\u9001\u77ed\u4fe1\n\nRuyiDevice.app.start(app_name)  # \u542f\u52a8\u5e94\u7528\nRuyiDevice.app.kill(app_name)  # \u5173\u95ed\u5e94\u7528\n\n# 3. ui\nRuyiUI.root() -&gt; UI_View    # \u83b7\u53d6 UI \u6839\u8282\u70b9\nRuyiUI.back()    # \u8fd4\u56de\u4e0a\u4e00\u7ea7 UI \u9875\u9762\n\nRuyiView.root -&gt; UI_View    # \u83b7\u53d6\u5f53\u524d UI \u8282\u70b9\u7684\u6839\u8282\u70b9\nRuyiView.locate_view(description)    # \u6839\u636e\u63cf\u8ff0\u83b7\u53d6 UI \u8282\u70b9\nRuyiView.iterate_views(description, limit=-1)    # \u6839\u636e\u63cf\u8ff0\u83b7\u53d6\u591a\u4e2a UI \u8282\u70b9\nRuyiView.wait_view(description, timeout=10)    # \u7b49\u5f85 UI \u8282\u70b9\u51fa\u73b0\n# \u8fd8\u6709 .contet .image .snapshot .click .input .scroll_up\n\nRuyiLocator\n\n# 4. \n\n\n# 1. data \n\n# 2. device\n\n# 3. fm\n\n# 4. task\n\n# 5. tools\n\n# 6. ui\n\n# 7. agent\n</code></pre>"},{"location":"system_developer/interfaces/data_interface/","title":"Data_Interface","text":""},{"location":"system_developer/interfaces/data_interface/#ruyi.data.Data_Interface","title":"<code>ruyi.data.Data_Interface</code>","text":"<p>               Bases: <code>RuyiInterface</code></p> <p>Interface for handling common data structures and resources on the device.</p> <p>This class provides methods to create and manage various data types such as LiveTable, Image, and Text. It inherits from RuyiInterface and is designed to be used within the RuyiAgent ecosystem.</p> <p>Attributes:</p> Name Type Description <code>_tag</code> <code>str</code> <p>A string identifier for the interface, set to 'data'.</p> Source code in <code>ruyi/data/__init__.py</code> <pre><code>class Data_Interface(RuyiInterface):\n    \"\"\"\n    Interface for handling common data structures and resources on the device.\n\n    This class provides methods to create and manage various data types such as\n    LiveTable, Image, and Text. It inherits from RuyiInterface and is designed\n    to be used within the RuyiAgent ecosystem.\n\n    Attributes:\n        _tag (str): A string identifier for the interface, set to 'data'.\n\n    \"\"\"\n\n    def __init__(self, agent):\n        \"\"\"\n        Initialize the Data_Interface.\n\n        Args:\n            agent: The RuyiAgent instance this interface is associated with.\n        \"\"\"\n        super().__init__(agent)\n        self._tag = 'data'\n\n    def live_table(self, *args, **kwargs):\n        \"\"\"\n        Create and return a LiveTable instance.\n\n        Args:\n            *args: Variable length argument list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            LiveTable: A new LiveTable instance associated with the agent.\n        \"\"\"\n        return LiveTable(self.agent, *args, **kwargs)\n\n    def image(self, *args, **kwargs):\n        \"\"\"\n        Create and return an Image instance.\n\n        Args:\n            *args: Variable length argument list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            Image: A new Image instance associated with the agent.\n        \"\"\"\n        return Image(self.agent, *args, **kwargs)\n\n    def text(self, *args, **kwargs):\n        \"\"\"\n        Create and return a Text instance.\n\n        Args:\n            *args: Variable length argument list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            Text: A new Text instance associated with the agent.\n        \"\"\"\n        return Text(self.agent, *args, **kwargs)\n</code></pre>"},{"location":"system_developer/interfaces/data_interface/#ruyi.data.Data_Interface.__init__","title":"<code>__init__(agent)</code>","text":"<p>Initialize the Data_Interface.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <p>The RuyiAgent instance this interface is associated with.</p> required Source code in <code>ruyi/data/__init__.py</code> <pre><code>def __init__(self, agent):\n    \"\"\"\n    Initialize the Data_Interface.\n\n    Args:\n        agent: The RuyiAgent instance this interface is associated with.\n    \"\"\"\n    super().__init__(agent)\n    self._tag = 'data'\n</code></pre>"},{"location":"system_developer/interfaces/data_interface/#ruyi.data.Data_Interface.image","title":"<code>image(*args, **kwargs)</code>","text":"<p>Create and return an Image instance.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>A new Image instance associated with the agent.</p> Source code in <code>ruyi/data/__init__.py</code> <pre><code>def image(self, *args, **kwargs):\n    \"\"\"\n    Create and return an Image instance.\n\n    Args:\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        Image: A new Image instance associated with the agent.\n    \"\"\"\n    return Image(self.agent, *args, **kwargs)\n</code></pre>"},{"location":"system_developer/interfaces/data_interface/#ruyi.data.Data_Interface.live_table","title":"<code>live_table(*args, **kwargs)</code>","text":"<p>Create and return a LiveTable instance.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>LiveTable</code> <p>A new LiveTable instance associated with the agent.</p> Source code in <code>ruyi/data/__init__.py</code> <pre><code>def live_table(self, *args, **kwargs):\n    \"\"\"\n    Create and return a LiveTable instance.\n\n    Args:\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        LiveTable: A new LiveTable instance associated with the agent.\n    \"\"\"\n    return LiveTable(self.agent, *args, **kwargs)\n</code></pre>"},{"location":"system_developer/interfaces/data_interface/#ruyi.data.Data_Interface.text","title":"<code>text(*args, **kwargs)</code>","text":"<p>Create and return a Text instance.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Text</code> <p>A new Text instance associated with the agent.</p> Source code in <code>ruyi/data/__init__.py</code> <pre><code>def text(self, *args, **kwargs):\n    \"\"\"\n    Create and return a Text instance.\n\n    Args:\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        Text: A new Text instance associated with the agent.\n    \"\"\"\n    return Text(self.agent, *args, **kwargs)\n</code></pre>"},{"location":"system_developer/interfaces/ruyi_interface/","title":"RuyiInterface","text":"<p>The <code>RuyiInterface</code> class defines the pattern to interact with <code>RuyiAgent</code>.</p> <p>It is the common base class for all interfaces.</p>"},{"location":"system_developer/ruyi.data/image/","title":"Image","text":"<p>Image is a data structure supporting many operations, inherited from <code>Data_Interface</code>.</p>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image","title":"<code>ruyi.data.common.Image</code>","text":"<p>               Bases: <code>RuyiInterface</code></p> Source code in <code>ruyi/data/common.py</code> <pre><code>class Image(RuyiInterface):\n    def __init__(self, agent, img: PILImage.Image, **metadata):\n        super().__init__(agent)\n        self._img = img\n        self._metadata = metadata\n\n    @property\n    def size(self):\n        \"\"\"\n        Returns the size of the image.\n\n        Returns:\n            tuple: A tuple representing the width and height of the image.\n        \"\"\"\n        return self._img.size\n\n    @property\n    def mode(self):\n        \"\"\"\n        Returns the mode of the image.\n\n        The mode defines the number and names of the bands in the image, \n        and also the pixel type and depth. Common modes include \"L\" \n        (luminance), \"RGB\" (true color), and \"CMYK\" (pre-press).\n\n        Returns:\n            str: The mode of the image.\n        \"\"\"\n        return self._img.mode\n\n    @property\n    def metadata(self):\n        \"\"\"\n        Retrieve the metadata associated with this instance.\n\n        Returns:\n            dict: The metadata dictionary.\n        \"\"\"\n        return self._metadata\n\n    def update_metadata(self, metadata: dict[str, Any]):\n        \"\"\"\n        Updates the metadata dictionary with the provided key-value pairs.\n\n        Args:\n            metadata (dict[str, Any]): A dictionary containing the metadata to update.\n        \"\"\"\n        self._metadata.update(metadata)\n\n    def show(self):\n        \"\"\"\n        Displays the image stored in the _img attribute using the default image viewer.\n        \"\"\"\n        self._img.show()\n\n    def save(self, path: str, format: str):\n        \"\"\"\n        Save the image to the specified path with the given format.\n\n        Args:\n            path (str): The file path where the image will be saved.\n            format (str): The format in which the image will be saved (e.g., 'JPEG', 'PNG').\n\n        Returns:\n            None\n        \"\"\"\n        self._img.save(path, format=format)\n\n    @classmethod\n    def from_path(cls, agent, path: str):\n        \"\"\"\n        Create an instance of the class from a given file path.\n\n        Args:\n            cls: The class itself.\n            agent: An instance of the agent.\n            path (str): The file path to the image.\n\n        Returns:\n            An instance of the class initialized with the agent and the image.\n        \"\"\"\n        img = ImageFile(path)\n        return cls(agent, img)\n\n    def to_numpy(self):\n        \"\"\"\n        Converts the internal image representation to a NumPy array.\n\n        Returns:\n            numpy.ndarray: The image represented as a NumPy array.\n        \"\"\"\n        return np.array(self._img)\n\n    def rotate(self, angle: float):\n        \"\"\"\n        Rotates the image by the specified angle.\n\n        Args:\n            angle (float): The angle to rotate the image, in degrees. Positive values \n                           will rotate the image counter-clockwise, and negative values \n                           will rotate it clockwise.\n\n        Returns:\n            None\n        \"\"\"\n        self._img = self._img.rotate(angle)\n\n    def crop(self, box: tuple[int, int, int, int]):\n        \"\"\"\n        Crops the image to the specified bounding box.\n\n        Args:\n            box (tuple[int, int, int, int]): A tuple of four integers specifying \n                                             the left, upper, right, and lower pixel \n                                             coordinate.\n\n        Returns:\n            None\n        \"\"\"\n        self._img = self._img.crop(box)\n\n    def resize(self, size: tuple[int, int]):\n        \"\"\"\n        Resize the image to the specified dimensions.\n\n        Args:\n            size (tuple[int, int]): A tuple containing the new width and height of the image.\n\n        Returns:\n            None\n        \"\"\"\n        self._img = self._img.resize(size)\n\n    def convert(self, mode: str):\n        \"\"\"\n        Converts the image to the specified mode.\n\n        Args:\n            mode (str): The mode to convert the image to. For example, 'L' for grayscale, 'RGB' for true color, etc.\n\n        Returns:\n            None\n        \"\"\"\n        self._img = self._img.convert(mode)\n\n    @classmethod\n    def from_numpy(cls, agent: RuyiAgent, array: np.ndarray):\n        \"\"\"\n        Create an instance of the class from a NumPy array.\n\n        Args:\n            agent (RuyiAgent): The agent associated with the instance.\n            array (np.ndarray): The NumPy array to convert into an image.\n\n        Returns:\n            An instance of the class initialized with the given agent and image.\n        \"\"\"\n        img = PILImage.fromarray(array)\n        return cls(agent, img)\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.convert","title":"<code>convert(mode)</code>","text":"<p>Converts the image to the specified mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>The mode to convert the image to. For example, 'L' for grayscale, 'RGB' for true color, etc.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def convert(self, mode: str):\n    \"\"\"\n    Converts the image to the specified mode.\n\n    Args:\n        mode (str): The mode to convert the image to. For example, 'L' for grayscale, 'RGB' for true color, etc.\n\n    Returns:\n        None\n    \"\"\"\n    self._img = self._img.convert(mode)\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.crop","title":"<code>crop(box)</code>","text":"<p>Crops the image to the specified bounding box.</p> <p>Parameters:</p> Name Type Description Default <code>box</code> <code>tuple[int, int, int, int]</code> <p>A tuple of four integers specifying                               the left, upper, right, and lower pixel                               coordinate.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def crop(self, box: tuple[int, int, int, int]):\n    \"\"\"\n    Crops the image to the specified bounding box.\n\n    Args:\n        box (tuple[int, int, int, int]): A tuple of four integers specifying \n                                         the left, upper, right, and lower pixel \n                                         coordinate.\n\n    Returns:\n        None\n    \"\"\"\n    self._img = self._img.crop(box)\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.from_numpy","title":"<code>from_numpy(agent, array)</code>  <code>classmethod</code>","text":"<p>Create an instance of the class from a NumPy array.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>RuyiAgent</code> <p>The agent associated with the instance.</p> required <code>array</code> <code>ndarray</code> <p>The NumPy array to convert into an image.</p> required <p>Returns:</p> Type Description <p>An instance of the class initialized with the given agent and image.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>@classmethod\ndef from_numpy(cls, agent: RuyiAgent, array: np.ndarray):\n    \"\"\"\n    Create an instance of the class from a NumPy array.\n\n    Args:\n        agent (RuyiAgent): The agent associated with the instance.\n        array (np.ndarray): The NumPy array to convert into an image.\n\n    Returns:\n        An instance of the class initialized with the given agent and image.\n    \"\"\"\n    img = PILImage.fromarray(array)\n    return cls(agent, img)\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.from_path","title":"<code>from_path(agent, path)</code>  <code>classmethod</code>","text":"<p>Create an instance of the class from a given file path.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <p>The class itself.</p> required <code>agent</code> <p>An instance of the agent.</p> required <code>path</code> <code>str</code> <p>The file path to the image.</p> required <p>Returns:</p> Type Description <p>An instance of the class initialized with the agent and the image.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>@classmethod\ndef from_path(cls, agent, path: str):\n    \"\"\"\n    Create an instance of the class from a given file path.\n\n    Args:\n        cls: The class itself.\n        agent: An instance of the agent.\n        path (str): The file path to the image.\n\n    Returns:\n        An instance of the class initialized with the agent and the image.\n    \"\"\"\n    img = ImageFile(path)\n    return cls(agent, img)\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.metadata","title":"<code>metadata</code>  <code>property</code>","text":"<p>Retrieve the metadata associated with this instance.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>The metadata dictionary.</p>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.mode","title":"<code>mode</code>  <code>property</code>","text":"<p>Returns the mode of the image.</p> <p>The mode defines the number and names of the bands in the image,  and also the pixel type and depth. Common modes include \"L\"  (luminance), \"RGB\" (true color), and \"CMYK\" (pre-press).</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The mode of the image.</p>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.resize","title":"<code>resize(size)</code>","text":"<p>Resize the image to the specified dimensions.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>tuple[int, int]</code> <p>A tuple containing the new width and height of the image.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def resize(self, size: tuple[int, int]):\n    \"\"\"\n    Resize the image to the specified dimensions.\n\n    Args:\n        size (tuple[int, int]): A tuple containing the new width and height of the image.\n\n    Returns:\n        None\n    \"\"\"\n    self._img = self._img.resize(size)\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.rotate","title":"<code>rotate(angle)</code>","text":"<p>Rotates the image by the specified angle.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle to rotate the image, in degrees. Positive values             will rotate the image counter-clockwise, and negative values             will rotate it clockwise.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def rotate(self, angle: float):\n    \"\"\"\n    Rotates the image by the specified angle.\n\n    Args:\n        angle (float): The angle to rotate the image, in degrees. Positive values \n                       will rotate the image counter-clockwise, and negative values \n                       will rotate it clockwise.\n\n    Returns:\n        None\n    \"\"\"\n    self._img = self._img.rotate(angle)\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.save","title":"<code>save(path, format)</code>","text":"<p>Save the image to the specified path with the given format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The file path where the image will be saved.</p> required <code>format</code> <code>str</code> <p>The format in which the image will be saved (e.g., 'JPEG', 'PNG').</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def save(self, path: str, format: str):\n    \"\"\"\n    Save the image to the specified path with the given format.\n\n    Args:\n        path (str): The file path where the image will be saved.\n        format (str): The format in which the image will be saved (e.g., 'JPEG', 'PNG').\n\n    Returns:\n        None\n    \"\"\"\n    self._img.save(path, format=format)\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.show","title":"<code>show()</code>","text":"<p>Displays the image stored in the _img attribute using the default image viewer.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def show(self):\n    \"\"\"\n    Displays the image stored in the _img attribute using the default image viewer.\n    \"\"\"\n    self._img.show()\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.size","title":"<code>size</code>  <code>property</code>","text":"<p>Returns the size of the image.</p> <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple representing the width and height of the image.</p>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.to_numpy","title":"<code>to_numpy()</code>","text":"<p>Converts the internal image representation to a NumPy array.</p> <p>Returns:</p> Type Description <p>numpy.ndarray: The image represented as a NumPy array.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def to_numpy(self):\n    \"\"\"\n    Converts the internal image representation to a NumPy array.\n\n    Returns:\n        numpy.ndarray: The image represented as a NumPy array.\n    \"\"\"\n    return np.array(self._img)\n</code></pre>"},{"location":"system_developer/ruyi.data/image/#ruyi.data.common.Image.update_metadata","title":"<code>update_metadata(metadata)</code>","text":"<p>Updates the metadata dictionary with the provided key-value pairs.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>dict[str, Any]</code> <p>A dictionary containing the metadata to update.</p> required Source code in <code>ruyi/data/common.py</code> <pre><code>def update_metadata(self, metadata: dict[str, Any]):\n    \"\"\"\n    Updates the metadata dictionary with the provided key-value pairs.\n\n    Args:\n        metadata (dict[str, Any]): A dictionary containing the metadata to update.\n    \"\"\"\n    self._metadata.update(metadata)\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/","title":"LiveTable","text":"<p>LiveTable is a flexible table-like data structure, inherited from <code>Data_Interface</code>.</p>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable","title":"<code>ruyi.data.common.LiveTable</code>","text":"<p>               Bases: <code>RuyiInterface</code></p> Source code in <code>ruyi/data/common.py</code> <pre><code>class LiveTable(RuyiInterface):\n    def __init__(self, agent: RuyiAgent | None = None, name: str | None = None):\n        super().__init__(agent)\n        self._name = name\n        self._data: list[dict[str, Any]] = []\n        self._columns: list[str] = []\n\n    def _add_column(self, column_name: str):\n        if column_name in self._columns:\n            return\n        self._columns.append(column_name)\n        for row in self._data:\n            row[column_name] = None\n\n    def _validate(self):\n        existing_columns = set(self._columns)\n        for row in self._data:\n            row_columns = set(row.keys())\n            missing_columns = existing_columns - row_columns\n            new_columns = row_columns - existing_columns\n\n            for column in missing_columns:\n                row[column] = None\n\n            if new_columns:\n                self._columns.extend(new_columns)\n                existing_columns.update(new_columns)\n                for r in self._data:\n                    for column in new_columns:\n                        if column not in r:\n                            r[column] = None\n\n    def add_row(self, row_dict: dict[str, Any]):\n        \"\"\"\n        Adds a row to the data structure.\n\n        If the columns are not yet defined, they will be initialized with the keys of the provided row_dict.\n        If the columns are already defined, it checks for any missing columns in the row_dict and raises a ValueError if any are found.\n        It also adds any new columns found in the row_dict to the existing columns.\n\n        Args:\n            row_dict (dict[str, Any]): A dictionary representing a row, where keys are column names and values are the corresponding data.\n\n        Raises:\n            ValueError: If row_dict is missing any columns that are already defined in the data structure.\n        \"\"\"\n        if not self._columns:\n            self._columns = list(row_dict.keys())\n        else:\n            missing_columns = set(self._columns) - set(row_dict.keys())\n            if missing_columns:\n                raise ValueError(f'row_dict is missing columns: {missing_columns}')\n            add_columns = set(row_dict.keys()) - set(self._columns)\n            for column in add_columns:\n                self._add_column(column)\n        self._data.append(row_dict)\n\n    def __len__(self):\n        return len(self._data)\n\n    @overload\n    def __getitem__(self, key: int)-&gt; dict[str, Any]: ...\n\n    @overload\n    def __getitem__(self, key: tuple[int, str])-&gt; Any: ...\n\n    def __getitem__(self, key: int | tuple[int, str]):\n        \"\"\"\n        Retrieve an item from the data structure.\n\n        Parameters:\n        key (int | tuple[int, str]): The key to access the data. It can be either:\n            - An integer to access the data by index.\n            - A tuple containing an integer and a string to access a specific column in the data at the given index.\n\n        Returns:\n        The data at the specified index or the specific column in the data at the given index.\n\n        Raises:\n        TypeError: If the key is not an int or a tuple[int, str].\n        \"\"\"\n        if isinstance(key, int):\n            return self._data[key]\n        elif isinstance(key, tuple):\n            index, column = key\n            return self._data[index][column]\n        else:\n            raise TypeError('key must be int or tuple[int, str]')\n\n    def iterrows(self):\n        \"\"\"\n        Iterate over DataFrame rows as (index, row) pairs.\n\n        Yields:\n            tuple: A tuple containing the index and the row data.\n        \"\"\"\n        for index, row in enumerate(self._data):\n            yield index, row\n\n    def __contains__(self, key):\n        \"\"\"\n        Check if the given key is in the _columns attribute.\n\n        Args:\n            key: The key to check for existence in the _columns attribute.\n\n        Returns:\n            bool: True if the key is in the _columns attribute, False otherwise.\n        \"\"\"\n        return key in self._columns\n\n    def to_dataframe(self):\n        \"\"\"\n        Converts the internal data to a pandas DataFrame.\n\n        Returns:\n            pd.DataFrame: A DataFrame containing the data stored in the instance.\n        \"\"\"\n        return pd.DataFrame(self._data, columns=self._columns)\n\n    def to_list(self):\n        \"\"\"\n        Converts the internal data to a list.\n\n        Returns:\n            list: The internal data as a list.\n        \"\"\"\n        return self._data\n\n    def update_row(self, index: int, row_dict: dict[str, Any]):\n        \"\"\"\n        Update a row in the data at the specified index with the provided dictionary.\n\n        Args:\n            index (int): The index of the row to update.\n            row_dict (dict[str, Any]): A dictionary containing the new row data. The keys should match the column names.\n\n        Raises:\n            IndexError: If the provided index is out of range.\n            ValueError: If the provided dictionary is missing columns or contains extra columns not in the original data.\n        \"\"\"\n        if index &gt;= len(self._data):\n            raise IndexError('Index out of range')\n        missing_columns = set(self._columns) - set(row_dict.keys())\n        if missing_columns:\n            raise ValueError(f'row_dict is missing columns: {missing_columns}')\n        add_columns = set(row_dict.keys()) - set(self._columns)\n        for column in add_columns:\n            self._add_column(column)\n        self._data[index] = row_dict\n\n    def delete_row(self, index: int):\n        \"\"\"\n        Deletes a row from the data at the specified index.\n\n        Args:\n            index (int): The index of the row to delete.\n\n        Raises:\n            IndexError: If the index is out of range.\n        \"\"\"\n        if index &gt;= len(self._data):\n            raise IndexError('Index out of range')\n        del self._data[index]\n\n    def rename_columns(self, column_mapping: dict[str, str]):\n        \"\"\"\n        Renames columns in the dataset based on the provided mapping.\n\n        Args:\n            column_mapping (dict[str, str]): A dictionary where keys are the current column names \n                                             and values are the new column names.\n\n        Raises:\n            ValueError: If a new column name already exists in the dataset.\n\n        Example:\n            column_mapping = {'old_name1': 'new_name1', 'old_name2': 'new_name2'}\n            rename_columns(column_mapping)\n        \"\"\"\n        for old_name, new_name in column_mapping.items():\n            if old_name not in self._columns:\n                continue\n            if new_name in self._columns:\n                raise ValueError(f'Column {new_name} already exists')\n            self._columns[self._columns.index(old_name)] = new_name\n            for row in self._data:\n                row[new_name] = row.pop(old_name)\n\n    def clear(self):\n        \"\"\"\n        Clears the data and columns of the object.\n\n        This method resets the internal data and columns to empty lists.\n        \"\"\"\n        self._data = []\n        self._columns = []\n\n    def __add__(self, other):\n        \"\"\"\n        Add two LiveTable instances together.\n\n        This method allows the use of the `+` operator to concatenate the data of two LiveTable instances.\n        It ensures that the operand is of type LiveTable and that both tables have matching columns.\n\n        Args:\n            other (LiveTable): The other LiveTable instance to add.\n\n        Returns:\n            LiveTable: A new LiveTable instance with concatenated data from both tables.\n\n        Raises:\n            TypeError: If the operand is not a LiveTable instance.\n            ValueError: If the columns of the two tables do not match.\n        \"\"\"\n        if not isinstance(other, LiveTable):\n            raise TypeError(f'unsupported operand type(s) for +: LiveTable and {type(other)}')\n        if self._columns != other._columns:\n            raise ValueError(f'Columns mismatch between {self._columns} and {other._columns}')\n        new_table = LiveTable(name=self.name, agent=self.agent)\n        new_table._columns = self._columns\n        new_table._data = self._data + other._data\n        return new_table\n\n    @property\n    def columns(self):\n        \"\"\"\n        Returns the columns of the dataset.\n\n        Returns:\n            list: A list of column names.\n        \"\"\"\n        return self._columns\n\n    @property\n    def name(self):\n        \"\"\"\n        Returns the name attribute of the instance.\n\n        Returns:\n            str: The name attribute of the instance.\n        \"\"\"\n        return self._name\n\n    def to_dict(self):\n        \"\"\"\n        Converts the object attributes to a dictionary.\n\n        Returns:\n            dict: A dictionary containing the object's name, columns, and data.\n        \"\"\"\n        return {'name': self._name, 'columns': self._columns, 'data': self._data}\n\n    @classmethod\n    def from_dict(cls, data: dict[str, Any], agent: RuyiAgent):\n        \"\"\"\n        Create an instance of the class from a dictionary.\n\n        Args:\n            data (dict[str, Any]): A dictionary containing the data to initialize the instance.\n            agent (RuyiAgent): An instance of RuyiAgent associated with the class.\n\n        Returns:\n            An instance of the class initialized with the provided data.\n        \"\"\"\n        table = cls(name=data['name'], agent=agent)\n        table._columns = data['columns']\n        table._data = data['data']\n        table._validate()\n        return table\n\n    def filter_rows(self, condition: Callable[[dict], bool]):\n        \"\"\"\n        Filters the rows of the table based on a given condition.\n\n        Args:\n            condition (Callable[[dict], bool]): A function that takes a row (as a dictionary) \n                                                 and returns True if the row should be included \n                                                 in the filtered results, and False otherwise.\n\n        Returns:\n            LiveTable: A new LiveTable instance containing only the rows that satisfy the condition.\n        \"\"\"\n        filtered_data = [row for row in self._data if condition(row)]\n        new_table = LiveTable(name=self._name, agent=self.agent)\n        new_table._columns = self._columns\n        new_table._data = filtered_data\n        return new_table\n\n    def sort_rows(self, column_name: str, reverse: bool = False):\n        \"\"\"\n        Sorts the rows of the data based on the specified column.\n\n        Args:\n            column_name (str): The name of the column to sort by.\n            reverse (bool, optional): If True, sorts the data in descending order. Defaults to False.\n\n        Raises:\n            ValueError: If the specified column does not exist in the data.\n        \"\"\"\n        if column_name not in self._columns:\n            raise ValueError(f'Column {column_name} does not exist')\n        self._data.sort(key=lambda row: row[column_name], reverse=reverse)\n\n    def get_column(self, column_name: str):\n        \"\"\"\n        Retrieve the values of a specified column from the data.\n\n        Args:\n            column_name (str): The name of the column to retrieve.\n\n        Returns:\n            list: A list of values from the specified column.\n\n        Raises:\n            ValueError: If the specified column does not exist in the data.\n        \"\"\"\n        if column_name not in self._columns:\n            raise ValueError(f'Column {column_name} does not exist')\n        return [row[column_name] for row in self._data]\n\n    def drop_column(self, column_name: str):\n        \"\"\"\n        Removes a column from the dataset.\n\n        Args:\n            column_name (str): The name of the column to be removed.\n\n        Raises:\n            ValueError: If the specified column does not exist in the dataset.\n        \"\"\"\n        if column_name not in self._columns:\n            raise ValueError(f'Column {column_name} does not exist')\n        self._columns.remove(column_name)\n        for row in self._data:\n            del row[column_name]\n\n    def rich_console_display(self):\n        console = Console()\n        table = Table(title=self._name)\n        for column in self._columns:\n            table.add_column(column, justify=\"center\", no_wrap=True)\n        for row in self._data:\n            table.add_row(*[str(row[column]) for column in self._columns])\n        console.print(table)\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.__add__","title":"<code>__add__(other)</code>","text":"<p>Add two LiveTable instances together.</p> <p>This method allows the use of the <code>+</code> operator to concatenate the data of two LiveTable instances. It ensures that the operand is of type LiveTable and that both tables have matching columns.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>LiveTable</code> <p>The other LiveTable instance to add.</p> required <p>Returns:</p> Name Type Description <code>LiveTable</code> <p>A new LiveTable instance with concatenated data from both tables.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the operand is not a LiveTable instance.</p> <code>ValueError</code> <p>If the columns of the two tables do not match.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __add__(self, other):\n    \"\"\"\n    Add two LiveTable instances together.\n\n    This method allows the use of the `+` operator to concatenate the data of two LiveTable instances.\n    It ensures that the operand is of type LiveTable and that both tables have matching columns.\n\n    Args:\n        other (LiveTable): The other LiveTable instance to add.\n\n    Returns:\n        LiveTable: A new LiveTable instance with concatenated data from both tables.\n\n    Raises:\n        TypeError: If the operand is not a LiveTable instance.\n        ValueError: If the columns of the two tables do not match.\n    \"\"\"\n    if not isinstance(other, LiveTable):\n        raise TypeError(f'unsupported operand type(s) for +: LiveTable and {type(other)}')\n    if self._columns != other._columns:\n        raise ValueError(f'Columns mismatch between {self._columns} and {other._columns}')\n    new_table = LiveTable(name=self.name, agent=self.agent)\n    new_table._columns = self._columns\n    new_table._data = self._data + other._data\n    return new_table\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.__contains__","title":"<code>__contains__(key)</code>","text":"<p>Check if the given key is in the _columns attribute.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The key to check for existence in the _columns attribute.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the key is in the _columns attribute, False otherwise.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __contains__(self, key):\n    \"\"\"\n    Check if the given key is in the _columns attribute.\n\n    Args:\n        key: The key to check for existence in the _columns attribute.\n\n    Returns:\n        bool: True if the key is in the _columns attribute, False otherwise.\n    \"\"\"\n    return key in self._columns\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.__getitem__","title":"<code>__getitem__(key)</code>","text":"<pre><code>__getitem__(key: int) -&gt; dict[str, Any]\n</code></pre><pre><code>__getitem__(key: tuple[int, str]) -&gt; Any\n</code></pre> <p>Retrieve an item from the data structure.</p> <p>key (int | tuple[int, str]): The key to access the data. It can be either:     - An integer to access the data by index.     - A tuple containing an integer and a string to access a specific column in the data at the given index.</p> <p>Returns: The data at the specified index or the specific column in the data at the given index.</p> <p>Raises: TypeError: If the key is not an int or a tuple[int, str].</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __getitem__(self, key: int | tuple[int, str]):\n    \"\"\"\n    Retrieve an item from the data structure.\n\n    Parameters:\n    key (int | tuple[int, str]): The key to access the data. It can be either:\n        - An integer to access the data by index.\n        - A tuple containing an integer and a string to access a specific column in the data at the given index.\n\n    Returns:\n    The data at the specified index or the specific column in the data at the given index.\n\n    Raises:\n    TypeError: If the key is not an int or a tuple[int, str].\n    \"\"\"\n    if isinstance(key, int):\n        return self._data[key]\n    elif isinstance(key, tuple):\n        index, column = key\n        return self._data[index][column]\n    else:\n        raise TypeError('key must be int or tuple[int, str]')\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.add_row","title":"<code>add_row(row_dict)</code>","text":"<p>Adds a row to the data structure.</p> <p>If the columns are not yet defined, they will be initialized with the keys of the provided row_dict. If the columns are already defined, it checks for any missing columns in the row_dict and raises a ValueError if any are found. It also adds any new columns found in the row_dict to the existing columns.</p> <p>Parameters:</p> Name Type Description Default <code>row_dict</code> <code>dict[str, Any]</code> <p>A dictionary representing a row, where keys are column names and values are the corresponding data.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If row_dict is missing any columns that are already defined in the data structure.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def add_row(self, row_dict: dict[str, Any]):\n    \"\"\"\n    Adds a row to the data structure.\n\n    If the columns are not yet defined, they will be initialized with the keys of the provided row_dict.\n    If the columns are already defined, it checks for any missing columns in the row_dict and raises a ValueError if any are found.\n    It also adds any new columns found in the row_dict to the existing columns.\n\n    Args:\n        row_dict (dict[str, Any]): A dictionary representing a row, where keys are column names and values are the corresponding data.\n\n    Raises:\n        ValueError: If row_dict is missing any columns that are already defined in the data structure.\n    \"\"\"\n    if not self._columns:\n        self._columns = list(row_dict.keys())\n    else:\n        missing_columns = set(self._columns) - set(row_dict.keys())\n        if missing_columns:\n            raise ValueError(f'row_dict is missing columns: {missing_columns}')\n        add_columns = set(row_dict.keys()) - set(self._columns)\n        for column in add_columns:\n            self._add_column(column)\n    self._data.append(row_dict)\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.clear","title":"<code>clear()</code>","text":"<p>Clears the data and columns of the object.</p> <p>This method resets the internal data and columns to empty lists.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def clear(self):\n    \"\"\"\n    Clears the data and columns of the object.\n\n    This method resets the internal data and columns to empty lists.\n    \"\"\"\n    self._data = []\n    self._columns = []\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Returns the columns of the dataset.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of column names.</p>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.delete_row","title":"<code>delete_row(index)</code>","text":"<p>Deletes a row from the data at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the row to delete.</p> required <p>Raises:</p> Type Description <code>IndexError</code> <p>If the index is out of range.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def delete_row(self, index: int):\n    \"\"\"\n    Deletes a row from the data at the specified index.\n\n    Args:\n        index (int): The index of the row to delete.\n\n    Raises:\n        IndexError: If the index is out of range.\n    \"\"\"\n    if index &gt;= len(self._data):\n        raise IndexError('Index out of range')\n    del self._data[index]\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.drop_column","title":"<code>drop_column(column_name)</code>","text":"<p>Removes a column from the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>The name of the column to be removed.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the specified column does not exist in the dataset.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def drop_column(self, column_name: str):\n    \"\"\"\n    Removes a column from the dataset.\n\n    Args:\n        column_name (str): The name of the column to be removed.\n\n    Raises:\n        ValueError: If the specified column does not exist in the dataset.\n    \"\"\"\n    if column_name not in self._columns:\n        raise ValueError(f'Column {column_name} does not exist')\n    self._columns.remove(column_name)\n    for row in self._data:\n        del row[column_name]\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.filter_rows","title":"<code>filter_rows(condition)</code>","text":"<p>Filters the rows of the table based on a given condition.</p> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable[[dict], bool]</code> <p>A function that takes a row (as a dictionary)                                   and returns True if the row should be included                                   in the filtered results, and False otherwise.</p> required <p>Returns:</p> Name Type Description <code>LiveTable</code> <p>A new LiveTable instance containing only the rows that satisfy the condition.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def filter_rows(self, condition: Callable[[dict], bool]):\n    \"\"\"\n    Filters the rows of the table based on a given condition.\n\n    Args:\n        condition (Callable[[dict], bool]): A function that takes a row (as a dictionary) \n                                             and returns True if the row should be included \n                                             in the filtered results, and False otherwise.\n\n    Returns:\n        LiveTable: A new LiveTable instance containing only the rows that satisfy the condition.\n    \"\"\"\n    filtered_data = [row for row in self._data if condition(row)]\n    new_table = LiveTable(name=self._name, agent=self.agent)\n    new_table._columns = self._columns\n    new_table._data = filtered_data\n    return new_table\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.from_dict","title":"<code>from_dict(data, agent)</code>  <code>classmethod</code>","text":"<p>Create an instance of the class from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>A dictionary containing the data to initialize the instance.</p> required <code>agent</code> <code>RuyiAgent</code> <p>An instance of RuyiAgent associated with the class.</p> required <p>Returns:</p> Type Description <p>An instance of the class initialized with the provided data.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, Any], agent: RuyiAgent):\n    \"\"\"\n    Create an instance of the class from a dictionary.\n\n    Args:\n        data (dict[str, Any]): A dictionary containing the data to initialize the instance.\n        agent (RuyiAgent): An instance of RuyiAgent associated with the class.\n\n    Returns:\n        An instance of the class initialized with the provided data.\n    \"\"\"\n    table = cls(name=data['name'], agent=agent)\n    table._columns = data['columns']\n    table._data = data['data']\n    table._validate()\n    return table\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.get_column","title":"<code>get_column(column_name)</code>","text":"<p>Retrieve the values of a specified column from the data.</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>The name of the column to retrieve.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of values from the specified column.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the specified column does not exist in the data.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def get_column(self, column_name: str):\n    \"\"\"\n    Retrieve the values of a specified column from the data.\n\n    Args:\n        column_name (str): The name of the column to retrieve.\n\n    Returns:\n        list: A list of values from the specified column.\n\n    Raises:\n        ValueError: If the specified column does not exist in the data.\n    \"\"\"\n    if column_name not in self._columns:\n        raise ValueError(f'Column {column_name} does not exist')\n    return [row[column_name] for row in self._data]\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.iterrows","title":"<code>iterrows()</code>","text":"<p>Iterate over DataFrame rows as (index, row) pairs.</p> <p>Yields:</p> Name Type Description <code>tuple</code> <p>A tuple containing the index and the row data.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def iterrows(self):\n    \"\"\"\n    Iterate over DataFrame rows as (index, row) pairs.\n\n    Yields:\n        tuple: A tuple containing the index and the row data.\n    \"\"\"\n    for index, row in enumerate(self._data):\n        yield index, row\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.name","title":"<code>name</code>  <code>property</code>","text":"<p>Returns the name attribute of the instance.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The name attribute of the instance.</p>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.rename_columns","title":"<code>rename_columns(column_mapping)</code>","text":"<p>Renames columns in the dataset based on the provided mapping.</p> <p>Parameters:</p> Name Type Description Default <code>column_mapping</code> <code>dict[str, str]</code> <p>A dictionary where keys are the current column names                               and values are the new column names.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If a new column name already exists in the dataset.</p> Example <p>column_mapping = {'old_name1': 'new_name1', 'old_name2': 'new_name2'} rename_columns(column_mapping)</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def rename_columns(self, column_mapping: dict[str, str]):\n    \"\"\"\n    Renames columns in the dataset based on the provided mapping.\n\n    Args:\n        column_mapping (dict[str, str]): A dictionary where keys are the current column names \n                                         and values are the new column names.\n\n    Raises:\n        ValueError: If a new column name already exists in the dataset.\n\n    Example:\n        column_mapping = {'old_name1': 'new_name1', 'old_name2': 'new_name2'}\n        rename_columns(column_mapping)\n    \"\"\"\n    for old_name, new_name in column_mapping.items():\n        if old_name not in self._columns:\n            continue\n        if new_name in self._columns:\n            raise ValueError(f'Column {new_name} already exists')\n        self._columns[self._columns.index(old_name)] = new_name\n        for row in self._data:\n            row[new_name] = row.pop(old_name)\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.sort_rows","title":"<code>sort_rows(column_name, reverse=False)</code>","text":"<p>Sorts the rows of the data based on the specified column.</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>The name of the column to sort by.</p> required <code>reverse</code> <code>bool</code> <p>If True, sorts the data in descending order. Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the specified column does not exist in the data.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def sort_rows(self, column_name: str, reverse: bool = False):\n    \"\"\"\n    Sorts the rows of the data based on the specified column.\n\n    Args:\n        column_name (str): The name of the column to sort by.\n        reverse (bool, optional): If True, sorts the data in descending order. Defaults to False.\n\n    Raises:\n        ValueError: If the specified column does not exist in the data.\n    \"\"\"\n    if column_name not in self._columns:\n        raise ValueError(f'Column {column_name} does not exist')\n    self._data.sort(key=lambda row: row[column_name], reverse=reverse)\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.to_dataframe","title":"<code>to_dataframe()</code>","text":"<p>Converts the internal data to a pandas DataFrame.</p> <p>Returns:</p> Type Description <p>pd.DataFrame: A DataFrame containing the data stored in the instance.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def to_dataframe(self):\n    \"\"\"\n    Converts the internal data to a pandas DataFrame.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing the data stored in the instance.\n    \"\"\"\n    return pd.DataFrame(self._data, columns=self._columns)\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the object attributes to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing the object's name, columns, and data.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def to_dict(self):\n    \"\"\"\n    Converts the object attributes to a dictionary.\n\n    Returns:\n        dict: A dictionary containing the object's name, columns, and data.\n    \"\"\"\n    return {'name': self._name, 'columns': self._columns, 'data': self._data}\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.to_list","title":"<code>to_list()</code>","text":"<p>Converts the internal data to a list.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>The internal data as a list.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def to_list(self):\n    \"\"\"\n    Converts the internal data to a list.\n\n    Returns:\n        list: The internal data as a list.\n    \"\"\"\n    return self._data\n</code></pre>"},{"location":"system_developer/ruyi.data/live_table/#ruyi.data.common.LiveTable.update_row","title":"<code>update_row(index, row_dict)</code>","text":"<p>Update a row in the data at the specified index with the provided dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the row to update.</p> required <code>row_dict</code> <code>dict[str, Any]</code> <p>A dictionary containing the new row data. The keys should match the column names.</p> required <p>Raises:</p> Type Description <code>IndexError</code> <p>If the provided index is out of range.</p> <code>ValueError</code> <p>If the provided dictionary is missing columns or contains extra columns not in the original data.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def update_row(self, index: int, row_dict: dict[str, Any]):\n    \"\"\"\n    Update a row in the data at the specified index with the provided dictionary.\n\n    Args:\n        index (int): The index of the row to update.\n        row_dict (dict[str, Any]): A dictionary containing the new row data. The keys should match the column names.\n\n    Raises:\n        IndexError: If the provided index is out of range.\n        ValueError: If the provided dictionary is missing columns or contains extra columns not in the original data.\n    \"\"\"\n    if index &gt;= len(self._data):\n        raise IndexError('Index out of range')\n    missing_columns = set(self._columns) - set(row_dict.keys())\n    if missing_columns:\n        raise ValueError(f'row_dict is missing columns: {missing_columns}')\n    add_columns = set(row_dict.keys()) - set(self._columns)\n    for column in add_columns:\n        self._add_column(column)\n    self._data[index] = row_dict\n</code></pre>"},{"location":"system_developer/ruyi.data/text/","title":"Text","text":"<p>Text is a string-like data structure, inherited from <code>Data_Interface</code>.</p>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text","title":"<code>ruyi.data.common.Text</code>","text":"<p>               Bases: <code>RuyiInterface</code></p> Source code in <code>ruyi/data/common.py</code> <pre><code>class Text(RuyiInterface):\n    def __init__(self, agent, text: str):\n        super().__init__(agent)\n        self._text = text\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        Returns the string representation of the object.\n\n        Returns:\n            str: The string representation of the object.\n        \"\"\"\n        return self._text\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        Return a string representation of the Text object.\n\n        Returns:\n            str: A string that represents the Text object, including the agent and text attributes.\n        \"\"\"\n        return f'Text(agent={self.agent}, text={self._text})'\n\n    def __bool__(self):\n        \"\"\"\n        Returns the boolean value of the instance.\n\n        This method is called to evaluate the truth value of the instance.\n        It returns True if the instance's `_text` attribute is non-empty,\n        otherwise it returns False.\n\n        Returns:\n            bool: True if `_text` is non-empty, False otherwise.\n        \"\"\"\n        return bool(self._text)\n\n    def upper(self, **kwargs):\n        \"\"\"\n        Convert the text to uppercase.\n\n        Args:\n            **kwargs: Additional keyword arguments to pass to the `upper` method.\n\n        Returns:\n            str: The text converted to uppercase.\n        \"\"\"\n        return self._text.upper(**kwargs)\n\n    def lower(self, **kwargs):\n        \"\"\"\n        Convert the text to lowercase.\n\n        Parameters:\n        **kwargs: Additional keyword arguments to pass to the lower() method.\n\n        Returns:\n        str: The text converted to lowercase.\n        \"\"\"\n        return self._text.lower(**kwargs)\n\n    def title(self, **kwargs):\n        \"\"\"\n        Convert the text to title case.\n\n        This method capitalizes the first letter of each word in the text.\n\n        Args:\n            **kwargs: Additional keyword arguments to pass to the title method.\n\n        Returns:\n            str: The text converted to title case.\n        \"\"\"\n        return self._text.title(**kwargs)\n\n    def capitalize(self, **kwargs):\n        \"\"\"\n        Capitalizes the first character of the text.\n\n        Parameters:\n        **kwargs: Additional keyword arguments to pass to the capitalize method.\n\n        Returns:\n        str: The capitalized text.\n        \"\"\"\n        return self._text.capitalize(**kwargs)\n\n    def swapcase(self, **kwargs):\n        \"\"\"\n        Convert uppercase characters to lowercase and lowercase characters to uppercase in the text.\n\n        Args:\n            **kwargs: Additional keyword arguments to pass to the underlying string method.\n\n        Returns:\n            str: The text with uppercase characters converted to lowercase and vice versa.\n        \"\"\"\n        return self._text.swapcase(**kwargs)\n\n    def count(self, sub: str, **kwargs):\n        \"\"\"\n        Count the occurrences of a substring in the text.\n\n        Args:\n            sub (str): The substring to be counted.\n            **kwargs: Additional keyword arguments to be passed to the count method.\n\n        Returns:\n            int: The number of non-overlapping occurrences of the substring in the text.\n        \"\"\"\n        return self._text.count(sub, **kwargs)\n\n    def find(self, sub: str, **kwargs):\n        \"\"\"\n        Find the first occurrence of a substring in the text.\n\n        Args:\n            sub (str): The substring to search for.\n            **kwargs: Additional keyword arguments to pass to the underlying string `find` method.\n\n        Returns:\n            int: The lowest index in the text where substring `sub` is found. Returns -1 if the substring is not found.\n        \"\"\"\n        return self._text.find(sub, **kwargs)\n\n    def __len__(self):\n        \"\"\"\n        Returns the length of the text.\n\n        Returns:\n            int: The number of characters in the text.\n        \"\"\"\n        return len(self._text)\n\n    def __contains__(self, sub: str):\n        \"\"\"\n        Check if a substring is present in the text.\n\n        Args:\n            sub (str): The substring to check for.\n\n        Returns:\n            bool: True if the substring is found in the text, False otherwise.\n        \"\"\"\n        return sub in self._text\n\n    def __iter__(self):\n        \"\"\"\n        Returns an iterator over the elements in the '_text' attribute.\n\n        Yields:\n            Iterator: An iterator over the elements in the '_text' attribute.\n        \"\"\"\n        return iter(self._text)\n\n    def __getitem__(self, key: int):\n        \"\"\"\n        Retrieve the item at the specified index from the _text attribute.\n\n        Args:\n            key (int): The index of the item to retrieve.\n\n        Returns:\n            The item at the specified index.\n        \"\"\"\n        return self._text[key]\n\n    def __add__(self, other):\n        \"\"\"\n        Concatenates the current Text object with another Text object or a string.\n\n        Args:\n            other (Text or str): The other object to concatenate with. It can be an instance of Text or a string.\n\n        Returns:\n            Text: A new Text object with the concatenated result.\n\n        Raises:\n            TypeError: If the other object is not an instance of Text or a string.\n        \"\"\"\n        if isinstance(other, Text):\n            return Text(self.agent, self._text + other._text)\n        elif isinstance(other, str):\n            return Text(self.agent, self._text + other)\n        else:\n            raise TypeError(f'unsupported operand type(s) for +: Text and {type(other)}')\n\n    def __sub__(self, other):\n        \"\"\"\n        Subtracts a Text object or a string from the current Text object.\n\n        Args:\n            other (Text or str): The Text object or string to be subtracted.\n\n        Returns:\n            Text: A new Text object with the specified text removed.\n\n        Raises:\n            TypeError: If the operand is not a Text object or a string.\n        \"\"\"\n        if isinstance(other, Text):\n            return Text(self.agent, self._text.replace(other._text, ''))\n        elif isinstance(other, str):\n            return Text(self.agent, self._text.replace(other, ''))\n        else:\n            raise TypeError(f'unsupported operand type(s) for -: Text and {type(other)}')\n\n    def __mul__(self, other):\n        \"\"\"\n        Multiply the Text object by an integer.\n\n        Parameters:\n        other (int): The integer to multiply the Text object by.\n\n        Returns:\n        Text: A new Text object with the text repeated 'other' times.\n\n        Raises:\n        TypeError: If 'other' is not an integer.\n        \"\"\"\n        if isinstance(other, int):\n            return Text(self.agent, self._text * other)\n        else:\n            raise TypeError(f'unsupported operand type(s) for *: Text and {type(other)}')\n\n    def __eq__(self, value: object) -&gt; bool:\n        \"\"\"\n        Check if this Text object is equal to another object.\n\n        Args:\n            value (object): The object to compare with this Text object. It can be another Text object or a string.\n\n        Returns:\n            bool: True if the objects are equal, False otherwise.\n        \"\"\"\n        if isinstance(value, Text):\n            return self._text == value._text\n        elif isinstance(value, str):\n            return self._text == value\n        else:\n            return False\n\n    def split(self, sep: str | None = None, regex: bool = False, **kwargs):\n        \"\"\"\n        Splits the text into a list of Text objects based on the specified separator.\n\n        Args:\n            sep (str | None): The separator to use for splitting the text. If None, splits on any whitespace.\n            regex (bool): If True, treats the separator as a regular expression. Defaults to False.\n            **kwargs: Additional keyword arguments to pass to the split function.\n\n        Returns:\n            list[Text]: A list of Text objects resulting from the split operation.\n\n        Raises:\n            ValueError: If regex is True and sep is None.\n        \"\"\"\n        if regex:\n            if sep is None:\n                raise ValueError(\"split() requires a separator when regex is True\")\n            return [Text(self.agent, s) for s in re.split(sep, self._text, **kwargs)]\n        else:\n            return [Text(self.agent, s) for s in self._text.split(sep, **kwargs)]\n\n    def strip(self, chars: str | None = None):\n        \"\"\"\n        Removes leading and trailing characters from the text.\n\n        Args:\n            chars (str | None): A string specifying the set of characters to be removed. \n                                If None, whitespace characters are removed.\n\n        Returns:\n            Text: A new Text object with the specified characters removed from both ends.\n        \"\"\"\n        return Text(self.agent, self._text.strip(chars))\n\n    def replace(self, old: str, new: str, regex: bool = False, **kwargs):\n        \"\"\"\n        Replace occurrences of a substring within the text.\n\n        Args:\n            old (str): The substring to be replaced.\n            new (str): The substring to replace with.\n            regex (bool, optional): If True, treat `old` as a regular expression. Defaults to False.\n            **kwargs: Additional keyword arguments to pass to `re.sub` or `str.replace`.\n\n        Returns:\n            Text: A new Text object with the replaced content.\n        \"\"\"\n        if regex:\n            return Text(self.agent, re.sub(old, new, self._text, **kwargs))\n        return Text(self.agent, self._text.replace(old, new, **kwargs))\n\n    def join(self, iterable):\n        \"\"\"\n        Joins an iterable of strings into a single string using the current text as the separator.\n\n        Args:\n            iterable (iterable): An iterable of strings to be joined.\n\n        Returns:\n            Text: A new Text object with the joined string.\n        \"\"\"\n        return Text(self.agent, self._text.join(iterable))\n\n    def startswith(self, prefix: str, **kwargs):\n        \"\"\"\n        Check if the text starts with the given prefix.\n\n        Args:\n            prefix (str): The prefix to check for at the start of the text.\n            **kwargs: Additional arguments to pass to the underlying str.startswith method.\n\n        Returns:\n            bool: True if the text starts with the specified prefix, False otherwise.\n        \"\"\"\n        return self._text.startswith(prefix, **kwargs)\n\n    def endswith(self, suffix: str, **kwargs):\n        \"\"\"\n        Check if the text ends with the specified suffix.\n\n        Args:\n            suffix (str): The suffix to check for at the end of the text.\n            **kwargs: Additional arguments to pass to the underlying str.endswith method.\n\n        Returns:\n            bool: True if the text ends with the specified suffix, False otherwise.\n        \"\"\"\n        return self._text.endswith(suffix, **kwargs)\n\n    def isalnum(self):\n        \"\"\"\n        Check if the text is alphanumeric.\n\n        Returns:\n            bool: True if the text is alphanumeric, False otherwise.\n        \"\"\"\n        return self._text.isalnum()\n\n    def rich_console_display(self, style: str | None = None):\n        \"\"\"\n        Displays the text using the rich Console with an optional style.\n\n        Args:\n            style (str | None): The style to apply to the text. If None, no style is applied.\n        \"\"\"\n        console = Console()\n        console.print(self._text, style=style)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__add__","title":"<code>__add__(other)</code>","text":"<p>Concatenates the current Text object with another Text object or a string.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Text or str</code> <p>The other object to concatenate with. It can be an instance of Text or a string.</p> required <p>Returns:</p> Name Type Description <code>Text</code> <p>A new Text object with the concatenated result.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the other object is not an instance of Text or a string.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __add__(self, other):\n    \"\"\"\n    Concatenates the current Text object with another Text object or a string.\n\n    Args:\n        other (Text or str): The other object to concatenate with. It can be an instance of Text or a string.\n\n    Returns:\n        Text: A new Text object with the concatenated result.\n\n    Raises:\n        TypeError: If the other object is not an instance of Text or a string.\n    \"\"\"\n    if isinstance(other, Text):\n        return Text(self.agent, self._text + other._text)\n    elif isinstance(other, str):\n        return Text(self.agent, self._text + other)\n    else:\n        raise TypeError(f'unsupported operand type(s) for +: Text and {type(other)}')\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__bool__","title":"<code>__bool__()</code>","text":"<p>Returns the boolean value of the instance.</p> <p>This method is called to evaluate the truth value of the instance. It returns True if the instance's <code>_text</code> attribute is non-empty, otherwise it returns False.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if <code>_text</code> is non-empty, False otherwise.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __bool__(self):\n    \"\"\"\n    Returns the boolean value of the instance.\n\n    This method is called to evaluate the truth value of the instance.\n    It returns True if the instance's `_text` attribute is non-empty,\n    otherwise it returns False.\n\n    Returns:\n        bool: True if `_text` is non-empty, False otherwise.\n    \"\"\"\n    return bool(self._text)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__contains__","title":"<code>__contains__(sub)</code>","text":"<p>Check if a substring is present in the text.</p> <p>Parameters:</p> Name Type Description Default <code>sub</code> <code>str</code> <p>The substring to check for.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the substring is found in the text, False otherwise.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __contains__(self, sub: str):\n    \"\"\"\n    Check if a substring is present in the text.\n\n    Args:\n        sub (str): The substring to check for.\n\n    Returns:\n        bool: True if the substring is found in the text, False otherwise.\n    \"\"\"\n    return sub in self._text\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__eq__","title":"<code>__eq__(value)</code>","text":"<p>Check if this Text object is equal to another object.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>object</code> <p>The object to compare with this Text object. It can be another Text object or a string.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the objects are equal, False otherwise.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __eq__(self, value: object) -&gt; bool:\n    \"\"\"\n    Check if this Text object is equal to another object.\n\n    Args:\n        value (object): The object to compare with this Text object. It can be another Text object or a string.\n\n    Returns:\n        bool: True if the objects are equal, False otherwise.\n    \"\"\"\n    if isinstance(value, Text):\n        return self._text == value._text\n    elif isinstance(value, str):\n        return self._text == value\n    else:\n        return False\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Retrieve the item at the specified index from the _text attribute.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>int</code> <p>The index of the item to retrieve.</p> required <p>Returns:</p> Type Description <p>The item at the specified index.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __getitem__(self, key: int):\n    \"\"\"\n    Retrieve the item at the specified index from the _text attribute.\n\n    Args:\n        key (int): The index of the item to retrieve.\n\n    Returns:\n        The item at the specified index.\n    \"\"\"\n    return self._text[key]\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__iter__","title":"<code>__iter__()</code>","text":"<p>Returns an iterator over the elements in the '_text' attribute.</p> <p>Yields:</p> Name Type Description <code>Iterator</code> <p>An iterator over the elements in the '_text' attribute.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __iter__(self):\n    \"\"\"\n    Returns an iterator over the elements in the '_text' attribute.\n\n    Yields:\n        Iterator: An iterator over the elements in the '_text' attribute.\n    \"\"\"\n    return iter(self._text)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__len__","title":"<code>__len__()</code>","text":"<p>Returns the length of the text.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of characters in the text.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __len__(self):\n    \"\"\"\n    Returns the length of the text.\n\n    Returns:\n        int: The number of characters in the text.\n    \"\"\"\n    return len(self._text)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Multiply the Text object by an integer.</p> <p>Parameters: other (int): The integer to multiply the Text object by.</p> <p>Returns: Text: A new Text object with the text repeated 'other' times.</p> <p>Raises: TypeError: If 'other' is not an integer.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __mul__(self, other):\n    \"\"\"\n    Multiply the Text object by an integer.\n\n    Parameters:\n    other (int): The integer to multiply the Text object by.\n\n    Returns:\n    Text: A new Text object with the text repeated 'other' times.\n\n    Raises:\n    TypeError: If 'other' is not an integer.\n    \"\"\"\n    if isinstance(other, int):\n        return Text(self.agent, self._text * other)\n    else:\n        raise TypeError(f'unsupported operand type(s) for *: Text and {type(other)}')\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the Text object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string that represents the Text object, including the agent and text attributes.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    Return a string representation of the Text object.\n\n    Returns:\n        str: A string that represents the Text object, including the agent and text attributes.\n    \"\"\"\n    return f'Text(agent={self.agent}, text={self._text})'\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__str__","title":"<code>__str__()</code>","text":"<p>Returns the string representation of the object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string representation of the object.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    Returns the string representation of the object.\n\n    Returns:\n        str: The string representation of the object.\n    \"\"\"\n    return self._text\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.__sub__","title":"<code>__sub__(other)</code>","text":"<p>Subtracts a Text object or a string from the current Text object.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Text or str</code> <p>The Text object or string to be subtracted.</p> required <p>Returns:</p> Name Type Description <code>Text</code> <p>A new Text object with the specified text removed.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the operand is not a Text object or a string.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def __sub__(self, other):\n    \"\"\"\n    Subtracts a Text object or a string from the current Text object.\n\n    Args:\n        other (Text or str): The Text object or string to be subtracted.\n\n    Returns:\n        Text: A new Text object with the specified text removed.\n\n    Raises:\n        TypeError: If the operand is not a Text object or a string.\n    \"\"\"\n    if isinstance(other, Text):\n        return Text(self.agent, self._text.replace(other._text, ''))\n    elif isinstance(other, str):\n        return Text(self.agent, self._text.replace(other, ''))\n    else:\n        raise TypeError(f'unsupported operand type(s) for -: Text and {type(other)}')\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.capitalize","title":"<code>capitalize(**kwargs)</code>","text":"<p>Capitalizes the first character of the text.</p> <p>Parameters: **kwargs: Additional keyword arguments to pass to the capitalize method.</p> <p>Returns: str: The capitalized text.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def capitalize(self, **kwargs):\n    \"\"\"\n    Capitalizes the first character of the text.\n\n    Parameters:\n    **kwargs: Additional keyword arguments to pass to the capitalize method.\n\n    Returns:\n    str: The capitalized text.\n    \"\"\"\n    return self._text.capitalize(**kwargs)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.count","title":"<code>count(sub, **kwargs)</code>","text":"<p>Count the occurrences of a substring in the text.</p> <p>Parameters:</p> Name Type Description Default <code>sub</code> <code>str</code> <p>The substring to be counted.</p> required <code>**kwargs</code> <p>Additional keyword arguments to be passed to the count method.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of non-overlapping occurrences of the substring in the text.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def count(self, sub: str, **kwargs):\n    \"\"\"\n    Count the occurrences of a substring in the text.\n\n    Args:\n        sub (str): The substring to be counted.\n        **kwargs: Additional keyword arguments to be passed to the count method.\n\n    Returns:\n        int: The number of non-overlapping occurrences of the substring in the text.\n    \"\"\"\n    return self._text.count(sub, **kwargs)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.endswith","title":"<code>endswith(suffix, **kwargs)</code>","text":"<p>Check if the text ends with the specified suffix.</p> <p>Parameters:</p> Name Type Description Default <code>suffix</code> <code>str</code> <p>The suffix to check for at the end of the text.</p> required <code>**kwargs</code> <p>Additional arguments to pass to the underlying str.endswith method.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the text ends with the specified suffix, False otherwise.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def endswith(self, suffix: str, **kwargs):\n    \"\"\"\n    Check if the text ends with the specified suffix.\n\n    Args:\n        suffix (str): The suffix to check for at the end of the text.\n        **kwargs: Additional arguments to pass to the underlying str.endswith method.\n\n    Returns:\n        bool: True if the text ends with the specified suffix, False otherwise.\n    \"\"\"\n    return self._text.endswith(suffix, **kwargs)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.find","title":"<code>find(sub, **kwargs)</code>","text":"<p>Find the first occurrence of a substring in the text.</p> <p>Parameters:</p> Name Type Description Default <code>sub</code> <code>str</code> <p>The substring to search for.</p> required <code>**kwargs</code> <p>Additional keyword arguments to pass to the underlying string <code>find</code> method.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The lowest index in the text where substring <code>sub</code> is found. Returns -1 if the substring is not found.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def find(self, sub: str, **kwargs):\n    \"\"\"\n    Find the first occurrence of a substring in the text.\n\n    Args:\n        sub (str): The substring to search for.\n        **kwargs: Additional keyword arguments to pass to the underlying string `find` method.\n\n    Returns:\n        int: The lowest index in the text where substring `sub` is found. Returns -1 if the substring is not found.\n    \"\"\"\n    return self._text.find(sub, **kwargs)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.isalnum","title":"<code>isalnum()</code>","text":"<p>Check if the text is alphanumeric.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the text is alphanumeric, False otherwise.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def isalnum(self):\n    \"\"\"\n    Check if the text is alphanumeric.\n\n    Returns:\n        bool: True if the text is alphanumeric, False otherwise.\n    \"\"\"\n    return self._text.isalnum()\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.join","title":"<code>join(iterable)</code>","text":"<p>Joins an iterable of strings into a single string using the current text as the separator.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>iterable</code> <p>An iterable of strings to be joined.</p> required <p>Returns:</p> Name Type Description <code>Text</code> <p>A new Text object with the joined string.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def join(self, iterable):\n    \"\"\"\n    Joins an iterable of strings into a single string using the current text as the separator.\n\n    Args:\n        iterable (iterable): An iterable of strings to be joined.\n\n    Returns:\n        Text: A new Text object with the joined string.\n    \"\"\"\n    return Text(self.agent, self._text.join(iterable))\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.lower","title":"<code>lower(**kwargs)</code>","text":"<p>Convert the text to lowercase.</p> <p>Parameters: **kwargs: Additional keyword arguments to pass to the lower() method.</p> <p>Returns: str: The text converted to lowercase.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def lower(self, **kwargs):\n    \"\"\"\n    Convert the text to lowercase.\n\n    Parameters:\n    **kwargs: Additional keyword arguments to pass to the lower() method.\n\n    Returns:\n    str: The text converted to lowercase.\n    \"\"\"\n    return self._text.lower(**kwargs)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.replace","title":"<code>replace(old, new, regex=False, **kwargs)</code>","text":"<p>Replace occurrences of a substring within the text.</p> <p>Parameters:</p> Name Type Description Default <code>old</code> <code>str</code> <p>The substring to be replaced.</p> required <code>new</code> <code>str</code> <p>The substring to replace with.</p> required <code>regex</code> <code>bool</code> <p>If True, treat <code>old</code> as a regular expression. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to <code>re.sub</code> or <code>str.replace</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Text</code> <p>A new Text object with the replaced content.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def replace(self, old: str, new: str, regex: bool = False, **kwargs):\n    \"\"\"\n    Replace occurrences of a substring within the text.\n\n    Args:\n        old (str): The substring to be replaced.\n        new (str): The substring to replace with.\n        regex (bool, optional): If True, treat `old` as a regular expression. Defaults to False.\n        **kwargs: Additional keyword arguments to pass to `re.sub` or `str.replace`.\n\n    Returns:\n        Text: A new Text object with the replaced content.\n    \"\"\"\n    if regex:\n        return Text(self.agent, re.sub(old, new, self._text, **kwargs))\n    return Text(self.agent, self._text.replace(old, new, **kwargs))\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.rich_console_display","title":"<code>rich_console_display(style=None)</code>","text":"<p>Displays the text using the rich Console with an optional style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>str | None</code> <p>The style to apply to the text. If None, no style is applied.</p> <code>None</code> Source code in <code>ruyi/data/common.py</code> <pre><code>def rich_console_display(self, style: str | None = None):\n    \"\"\"\n    Displays the text using the rich Console with an optional style.\n\n    Args:\n        style (str | None): The style to apply to the text. If None, no style is applied.\n    \"\"\"\n    console = Console()\n    console.print(self._text, style=style)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.split","title":"<code>split(sep=None, regex=False, **kwargs)</code>","text":"<p>Splits the text into a list of Text objects based on the specified separator.</p> <p>Parameters:</p> Name Type Description Default <code>sep</code> <code>str | None</code> <p>The separator to use for splitting the text. If None, splits on any whitespace.</p> <code>None</code> <code>regex</code> <code>bool</code> <p>If True, treats the separator as a regular expression. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the split function.</p> <code>{}</code> <p>Returns:</p> Type Description <p>list[Text]: A list of Text objects resulting from the split operation.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If regex is True and sep is None.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def split(self, sep: str | None = None, regex: bool = False, **kwargs):\n    \"\"\"\n    Splits the text into a list of Text objects based on the specified separator.\n\n    Args:\n        sep (str | None): The separator to use for splitting the text. If None, splits on any whitespace.\n        regex (bool): If True, treats the separator as a regular expression. Defaults to False.\n        **kwargs: Additional keyword arguments to pass to the split function.\n\n    Returns:\n        list[Text]: A list of Text objects resulting from the split operation.\n\n    Raises:\n        ValueError: If regex is True and sep is None.\n    \"\"\"\n    if regex:\n        if sep is None:\n            raise ValueError(\"split() requires a separator when regex is True\")\n        return [Text(self.agent, s) for s in re.split(sep, self._text, **kwargs)]\n    else:\n        return [Text(self.agent, s) for s in self._text.split(sep, **kwargs)]\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.startswith","title":"<code>startswith(prefix, **kwargs)</code>","text":"<p>Check if the text starts with the given prefix.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The prefix to check for at the start of the text.</p> required <code>**kwargs</code> <p>Additional arguments to pass to the underlying str.startswith method.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the text starts with the specified prefix, False otherwise.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def startswith(self, prefix: str, **kwargs):\n    \"\"\"\n    Check if the text starts with the given prefix.\n\n    Args:\n        prefix (str): The prefix to check for at the start of the text.\n        **kwargs: Additional arguments to pass to the underlying str.startswith method.\n\n    Returns:\n        bool: True if the text starts with the specified prefix, False otherwise.\n    \"\"\"\n    return self._text.startswith(prefix, **kwargs)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.strip","title":"<code>strip(chars=None)</code>","text":"<p>Removes leading and trailing characters from the text.</p> <p>Parameters:</p> Name Type Description Default <code>chars</code> <code>str | None</code> <p>A string specifying the set of characters to be removed.                  If None, whitespace characters are removed.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Text</code> <p>A new Text object with the specified characters removed from both ends.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def strip(self, chars: str | None = None):\n    \"\"\"\n    Removes leading and trailing characters from the text.\n\n    Args:\n        chars (str | None): A string specifying the set of characters to be removed. \n                            If None, whitespace characters are removed.\n\n    Returns:\n        Text: A new Text object with the specified characters removed from both ends.\n    \"\"\"\n    return Text(self.agent, self._text.strip(chars))\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.swapcase","title":"<code>swapcase(**kwargs)</code>","text":"<p>Convert uppercase characters to lowercase and lowercase characters to uppercase in the text.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional keyword arguments to pass to the underlying string method.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The text with uppercase characters converted to lowercase and vice versa.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def swapcase(self, **kwargs):\n    \"\"\"\n    Convert uppercase characters to lowercase and lowercase characters to uppercase in the text.\n\n    Args:\n        **kwargs: Additional keyword arguments to pass to the underlying string method.\n\n    Returns:\n        str: The text with uppercase characters converted to lowercase and vice versa.\n    \"\"\"\n    return self._text.swapcase(**kwargs)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.title","title":"<code>title(**kwargs)</code>","text":"<p>Convert the text to title case.</p> <p>This method capitalizes the first letter of each word in the text.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional keyword arguments to pass to the title method.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The text converted to title case.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def title(self, **kwargs):\n    \"\"\"\n    Convert the text to title case.\n\n    This method capitalizes the first letter of each word in the text.\n\n    Args:\n        **kwargs: Additional keyword arguments to pass to the title method.\n\n    Returns:\n        str: The text converted to title case.\n    \"\"\"\n    return self._text.title(**kwargs)\n</code></pre>"},{"location":"system_developer/ruyi.data/text/#ruyi.data.common.Text.upper","title":"<code>upper(**kwargs)</code>","text":"<p>Convert the text to uppercase.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Additional keyword arguments to pass to the <code>upper</code> method.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The text converted to uppercase.</p> Source code in <code>ruyi/data/common.py</code> <pre><code>def upper(self, **kwargs):\n    \"\"\"\n    Convert the text to uppercase.\n\n    Args:\n        **kwargs: Additional keyword arguments to pass to the `upper` method.\n\n    Returns:\n        str: The text converted to uppercase.\n    \"\"\"\n    return self._text.upper(**kwargs)\n</code></pre>"},{"location":"zh/","title":"RuyiAgent\u4e2d\u6587\u6587\u6863","text":"<p>Framework for building intelligent, reliable and efficient mobile agents.</p> <p>\u6784\u5efa\u548c\u652f\u6491\u66f4\u667a\u80fd\u3001\u66f4\u53ef\u9760\u3001\u66f4\u9ad8\u6548\u7684\u79fb\u52a8\u7aef\u667a\u80fd\u4f53\u6846\u67b6\u3002</p> <p>\u6b22\u8fce\u6bcf\u4e2a\u53c2\u4e0e\u8005! </p> <p>\u6b22\u8fce\u6240\u6709\u4eba\u53c2\u4e0e\u5230ChainStream\u7684\u5f00\u53d1\u548c\u4f7f\u7528\u4e2d\u6765\uff0c\u65e0\u8bba\u662f\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u8d21\u732e\u8005\u3001\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u89d2\u8272\u3002</p> <p>\u52a0\u5165\u6211\u4eec! </p> <p>ChainStream \u4ecd\u5728\u5f00\u53d1\u4e2d\uff0c \u6211\u4eec\u6b22\u8fce\u6240\u6709\u7528\u6237\u3001\u5efa\u8bae\u8005\u548c\u8d21\u732e\u8005\u53c2\u4e0e\u3002 \u6b22\u8fce\u901a\u8fc7Github Repo\u4e0e\u6211\u4eec\u8054\u7cfb\u3002 \u540c\u6837\u7684\uff0c\u672c\u6587\u6863\u4ecd\u5728\u5f00\u53d1\u4e2d\uff0c\u8bf7\u5b9a\u671f\u67e5\u770b\u66f4\u65b0\u3002ChainStream</p>"},{"location":"zh/#_1","title":"\u6587\u6863\u7ed3\u6784","text":"<p>\u5bf9\u4e8e\u6bcf\u4e2a\u8bfb\u8005\uff0c\u6211\u4eec\u90fd\u5efa\u8bae\u60a8\u5148\u9605\u8bfb\uff1a</p> <ul> <li> RuyiAgent\u6982\u89c8 \u4e86\u89e3RuyiAgent\u7684\u57fa\u672c\u6982\u5ff5\u548c\u529f\u80fd\u3002</li> </ul> <p>\u672c\u6587\u6863\u9762\u5411\u56db\u4e2a\u4e3b\u8981\u53d7\u4f17\uff1a</p> <ul> <li>RuyiAgent \u7528\u6237\uff1a\u5e0c\u671b\u4f7f\u7528 RuyiAgent \u6216\u5c06\u5176\u96c6\u6210\u5230\u73b0\u6709\u7cfb\u7edf\u4e2d\u7684\u7528\u6237\u3002\u5c1a\u672a\u5b8c\u6210\uff0c\u656c\u8bf7\u671f\u5f85\u3002</li> <li>Agent\u5f00\u53d1\u8005\uff1a\u5e0c\u671b\u4e86\u89e3 RuyiAgent \u7684\u5185\u90e8\u5de5\u4f5c\u539f\u7406\u5e76\u6784\u5efa\u81ea\u5df1\u7684\u667a\u80fd\u4f53\u7684\u5f00\u53d1\u8005\u3002\u5c1a\u672a\u5b8c\u6210\uff0c\u656c\u8bf7\u671f\u5f85\u3002</li> <li>RuyiAgent\u7cfb\u7edf\u8d21\u732e\u8005\uff1a\u5e0c\u671b\u4e3a RuyiAgent \u7684\u5f00\u53d1\u505a\u51fa\u8d21\u732e\u7684\u7cfb\u7edf\u5f00\u53d1\u8005\u3002\u8bf7\u9605\u8bfb  \u7cfb\u7edf\u8d21\u732e\u8005\u8005\u6307\u5357</li> <li>\u5b66\u8005\uff1a\u5e0c\u671b\u590d\u73b0\u8bba\u6587\u7ed3\u679c\uff0c\u6216\u8005\u4f7f\u7528 RuyiAgent \u6846\u67b6\u8fdb\u884c\u7814\u7a76\u7684\u5b66\u8005\u3002\u5c1a\u672a\u5b8c\u6210\uff0c\u656c\u8bf7\u671f\u5f85\u3002</li> </ul>"},{"location":"zh/#_2","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<ul> <li>2024.10: RuyiAgent\u9879\u76ee\u6b63\u5f0f\u542f\u52a8\u3002 </li> </ul>"},{"location":"zh/#_3","title":"\u7248\u6743\u58f0\u660e","text":"<ul> <li>\u672c\u5de5\u4f5c\u7531\u6e05\u534e\u5927\u5b66\u667a\u80fd\u4ea7\u4e1a\u7814\u7a76\u9662AIoT\u56e2\u961f\u7684RuyiAgent\u9879\u76ee\u7ec4\u63a8\u51fa\u3002</li> <li>\u540e\u7eed\u5c06\u53d1\u5e03\u66f4\u8be6\u7ec6\u7684\u5f15\u7528\u683c\u5f0f\u3002</li> </ul>"},{"location":"zh/overview/whats_ruyiagent/","title":"RuyiAgent","text":"<p>RuyiAgent\u65e8\u5728\u6784\u5efa\u548c\u652f\u6491\u66f4\u667a\u80fd\u3001\u66f4\u53ef\u9760\u3001\u66f4\u9ad8\u6548\u7684\u79fb\u52a8\u7aef\u667a\u80fd\u4f53\u6846\u67b6\u3002</p> <p>\u4e3b\u8981\u5305\u62ec\uff1a</p> <ol> <li>\u4e00\u4e2a Mobile Agent \u7f16\u7a0b\u6846\u67b6\uff0c\u5305\u62ec Agent Programmer \u53cb\u597d\u7684 API \u8bbe\u8ba1\u3001\u81ea\u7136\u8bed\u8a00\u9a71\u52a8\u7684\u7f16\u7a0b\u65b9\u5f0f\u3001\u4e13\u6709\u7684\u89e3\u91ca\u5668\u3001\u9ad8\u6548\u667a\u80fd\u53ef\u9760\u7684 UI \u4ea4\u4e92\u548c\u6570\u636e\u5b58\u50a8\u3001\u66f4\u5b8c\u5584\u7684\u5b89\u5168\u4f53\u7cfb\u3002</li> <li>\u4e00\u6279\u66f4\u5f3a\u5927\u7684 Mobile Agent App\u3002</li> <li>\u4e00\u7cfb\u5217\u5173\u952e\u6280\u672f\u7684\u7814\u7a76\u548c\u5f00\u6e90\u5b9e\u73b0\u3002</li> </ol>"},{"location":"zh/system_developer/api_document/","title":"\u4e3b\u8981API","text":"<p>\u6b64\u5904\u7b80\u5355\u4ecb\u7ecd\u521d\u7248\u6846\u67b6\u7684\u4e3b\u8981API\uff1a</p> <pre><code># 0. agent\n# \u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u4e00\u4e2aagent\u5b9e\u4f8b\uff0c\u4f9d\u9760\u6d88\u606f\u961f\u5217\u5355\u7ebf\u7a0b\u5de5\u4f5c\uff0c\u6210\u5458\u53d8\u91cf\u4e2d\u7ef4\u62a4\u6240\u6709 API \u7684\u7c7b\u5b9e\u4f8b\nRuyiAgent.__init__(AgentConfig) # \u6839\u636e config \u5b9e\u4f8b\u5316 Agent \u53ca\u5176\u6240\u6709\u6210\u5458\u53d8\u91cf\u5e76\u542f\u52a8\nRuyiAgent.serve()  # \u542f\u52a8\u6d88\u606f\u961f\u5217\u8f6e\u8be2\nRuyiAgent.stop()  # \u505c\u6b62\u6d88\u606f\u961f\u5217\u8f6e\u8be2\u5e76\u505c\u6b62\u6240\u6709\u6210\u5458\u53d8\u91cf\u7684 API \u5b9e\u4f8b\nRuyiAgent.log(message, tag=\"INFO\", reply_msg=None)  # \u65e5\u5fd7\u8bb0\u5f55\n\n# 1. task\nRuyiTask.__init__()     # \u914d\u7f6e name\u3001description\u3001status\u3001permissions\u7b49\u5c5e\u6027\nRuyiTask.main()         # \u4efb\u52a1\u4e3b\u4f53\u51fd\u6570\uff0c\u5b9e\u73b0\u5177\u4f53\u7684\u529f\u80fd\n\nRuyiAgent.task.execute_task(taskCls)    # \u6267\u884c\u4efb\u52a1\n\n# 2. device\nRuyiDevice.take_picture()  # \u62cd\u7167\nRuyiDevice.sms(phone_num, msg)  # \u53d1\u9001\u77ed\u4fe1\n\nRuyiDevice.app.start(app_name)  # \u542f\u52a8\u5e94\u7528\nRuyiDevice.app.kill(app_name)  # \u5173\u95ed\u5e94\u7528\n\n# 3. ui\nRuyiUI.root() -&gt; UI_View    # \u83b7\u53d6 UI \u6839\u8282\u70b9\nRuyiUI.back()    # \u8fd4\u56de\u4e0a\u4e00\u7ea7 UI \u9875\u9762\n\nRuyiView.root -&gt; UI_View    # \u83b7\u53d6\u5f53\u524d UI \u8282\u70b9\u7684\u6839\u8282\u70b9\nRuyiView.locate_view(description)    # \u6839\u636e\u63cf\u8ff0\u83b7\u53d6 UI \u8282\u70b9\nRuyiView.iterate_views(description, limit=-1)    # \u6839\u636e\u63cf\u8ff0\u83b7\u53d6\u591a\u4e2a UI \u8282\u70b9\nRuyiView.wait_view(description, timeout=10)    # \u7b49\u5f85 UI \u8282\u70b9\u51fa\u73b0\n# \u8fd8\u6709 .contet .image .snapshot .click .input .scroll_up\n\nRuyiLocator\n\n# 4. fm\n\nRuyiModel.__call__(*args, returns)    # \u6a21\u578b\u8c03\u7528\n\n# 5. data \n\nRuyiLiveTable.add_row(row_data)    # \u6dfb\u52a0\u4e00\u884c\u6570\u636e\n\n# maybe a stream api here\n</code></pre>"}]}